//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language\\toyPlParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class toyPlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ASSIGN=1, EQ=2, NOT_EQ=3, GT=4, LW=5, GTEQ=6, LWEQ=7, SEMI=8, LPAREN=9, 
		RPAREN=10, SUM_OP=11, MINUS_OP=12, TIMES_OP=13, DIV_OP=14, MOD_OP=15, 
		AND_OP=16, OR_OP=17, NOT=18, LCOND=19, RCOND=20, IF=21, THEN=22, ELSE=23, 
		WHILE=24, DO=25, INT=26, ID=27, WS=28;
	public const int
		RULE_var = 0, RULE_expr = 1, RULE_int_op = 2, RULE_cond_int_op = 3, RULE_cond_bool_op = 4, 
		RULE_cond = 5, RULE_statement = 6, RULE_program = 7;
	public static readonly string[] ruleNames = {
		"var", "expr", "int_op", "cond_int_op", "cond_bool_op", "cond", "statement", 
		"program"
	};

	private static readonly string[] _LiteralNames = {
		null, "':='", "'='", "'/='", "'>'", "'<'", "'>='", "'<='", "';'", "'('", 
		"')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'{'", 
		"'}'", "'if'", "'then'", "'else'", "'while'", "'do'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ASSIGN", "EQ", "NOT_EQ", "GT", "LW", "GTEQ", "LWEQ", "SEMI", "LPAREN", 
		"RPAREN", "SUM_OP", "MINUS_OP", "TIMES_OP", "DIV_OP", "MOD_OP", "AND_OP", 
		"OR_OP", "NOT", "LCOND", "RCOND", "IF", "THEN", "ELSE", "WHILE", "DO", 
		"INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "toyPlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static toyPlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public toyPlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public toyPlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(toyPlParser.ID, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(toyPlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(toyPlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_opContext int_op() {
			return GetRuleContext<Int_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(toyPlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(toyPlParser.NOT, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 20;
				Match(LPAREN);
				State = 21;
				expr();
				State = 22;
				int_op();
				State = 23;
				expr();
				State = 24;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 26;
				Match(LPAREN);
				State = 27;
				expr();
				State = 28;
				Match(NOT);
				State = 29;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_OP() { return GetToken(toyPlParser.SUM_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OP() { return GetToken(toyPlParser.MINUS_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES_OP() { return GetToken(toyPlParser.TIMES_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OP() { return GetToken(toyPlParser.DIV_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_OP() { return GetToken(toyPlParser.MOD_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(toyPlParser.NOT, 0); }
		public Int_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_opContext int_op() {
		Int_opContext _localctx = new Int_opContext(Context, State);
		EnterRule(_localctx, 4, RULE_int_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUM_OP) | (1L << MINUS_OP) | (1L << TIMES_OP) | (1L << DIV_OP) | (1L << MOD_OP) | (1L << NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_int_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(toyPlParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ() { return GetToken(toyPlParser.NOT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(toyPlParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LW() { return GetToken(toyPlParser.LW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(toyPlParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LWEQ() { return GetToken(toyPlParser.LWEQ, 0); }
		public Cond_int_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_int_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_int_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_int_opContext cond_int_op() {
		Cond_int_opContext _localctx = new Cond_int_opContext(Context, State);
		EnterRule(_localctx, 6, RULE_cond_int_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NOT_EQ) | (1L << GT) | (1L << LW) | (1L << GTEQ) | (1L << LWEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_bool_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(toyPlParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(toyPlParser.OR_OP, 0); }
		public Cond_bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_bool_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_bool_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_bool_opContext cond_bool_op() {
		Cond_bool_opContext _localctx = new Cond_bool_opContext(Context, State);
		EnterRule(_localctx, 8, RULE_cond_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_la = TokenStream.LA(1);
			if ( !(_la==AND_OP || _la==OR_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(toyPlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_int_opContext cond_int_op() {
			return GetRuleContext<Cond_int_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(toyPlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(toyPlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_bool_opContext cond_bool_op() {
			return GetRuleContext<Cond_bool_opContext>(0);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 10, RULE_cond);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				Match(LPAREN);
				State = 40;
				expr();
				State = 41;
				cond_int_op();
				State = 42;
				expr();
				State = 43;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45;
				Match(LPAREN);
				State = 46;
				Match(NOT);
				State = 47;
				cond();
				State = 48;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				Match(LPAREN);
				State = 51;
				cond();
				State = 52;
				cond_bool_op();
				State = 53;
				cond();
				State = 54;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(toyPlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(toyPlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(toyPlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(toyPlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(toyPlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(toyPlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(toyPlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCOND() { return GetToken(toyPlParser.LCOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCOND() { return GetToken(toyPlParser.RCOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(toyPlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(toyPlParser.DO, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				var();
				State = 59;
				Match(ASSIGN);
				State = 60;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				Match(LPAREN);
				State = 63;
				statement();
				State = 64;
				Match(SEMI);
				State = 65;
				statement();
				State = 66;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				Match(LPAREN);
				State = 69;
				Match(IF);
				State = 70;
				cond();
				State = 71;
				Match(THEN);
				State = 72;
				statement();
				State = 73;
				Match(ELSE);
				State = 74;
				statement();
				State = 75;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				Match(LPAREN);
				State = 78;
				Match(LCOND);
				State = 79;
				cond();
				State = 80;
				Match(RCOND);
				State = 81;
				Match(WHILE);
				State = 82;
				cond();
				State = 83;
				Match(DO);
				State = 84;
				statement();
				State = 85;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCOND() { return GetTokens(toyPlParser.LCOND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCOND(int i) {
			return GetToken(toyPlParser.LCOND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext[] cond() {
			return GetRuleContexts<CondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond(int i) {
			return GetRuleContext<CondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCOND() { return GetTokens(toyPlParser.RCOND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCOND(int i) {
			return GetToken(toyPlParser.RCOND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItoyPlParserVisitor<TResult> typedVisitor = visitor as ItoyPlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 14, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(LCOND);
			State = 90;
			cond();
			State = 91;
			Match(RCOND);
			State = 92;
			statement();
			State = 93;
			Match(LCOND);
			State = 94;
			cond();
			State = 95;
			Match(RCOND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\x64', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', ';', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'Z', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x5', '\x4', '\x2', 
		'\r', '\x11', '\x14', '\x14', '\x3', '\x2', '\x4', '\t', '\x3', '\x2', 
		'\x12', '\x13', '\x2', '\x63', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '!', '\x3', '\x2', '\x2', '\x2', '\x6', '#', '\x3', '\x2', '\x2', 
		'\x2', '\b', '%', '\x3', '\x2', '\x2', '\x2', '\n', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\f', ':', '\x3', '\x2', '\x2', '\x2', '\xE', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '[', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\a', '\x1D', '\x2', '\x2', '\x13', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\"', '\x5', '\x2', '\x2', '\x2', '\x15', '\"', '\a', '\x1C', 
		'\x2', '\x2', '\x16', '\x17', '\a', '\v', '\x2', '\x2', '\x17', '\x18', 
		'\x5', '\x4', '\x3', '\x2', '\x18', '\x19', '\x5', '\x6', '\x4', '\x2', 
		'\x19', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', '\f', 
		'\x2', '\x2', '\x1B', '\"', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\a', '\v', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\x4', '\x3', '\x2', 
		'\x1E', '\x1F', '\a', '\x14', '\x2', '\x2', '\x1F', ' ', '\a', '\f', '\x2', 
		'\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x15', '\x3', '\x2', '\x2', '\x2', '!', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x1C', '\x3', '\x2', '\x2', '\x2', '\"', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\t', '\x2', '\x2', '\x2', '$', 
		'\a', '\x3', '\x2', '\x2', '\x2', '%', '&', '\t', '\x3', '\x2', '\x2', 
		'&', '\t', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\t', '\x4', '\x2', 
		'\x2', '(', '\v', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\v', '\x2', 
		'\x2', '*', '+', '\x5', '\x4', '\x3', '\x2', '+', ',', '\x5', '\b', '\x5', 
		'\x2', ',', '-', '\x5', '\x4', '\x3', '\x2', '-', '.', '\a', '\f', '\x2', 
		'\x2', '.', ';', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\v', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\x14', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\f', '\a', '\x2', '\x32', '\x33', '\a', '\f', '\x2', '\x2', '\x33', 
		';', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\v', '\x2', '\x2', 
		'\x35', '\x36', '\x5', '\f', '\a', '\x2', '\x36', '\x37', '\x5', '\n', 
		'\x6', '\x2', '\x37', '\x38', '\x5', '\f', '\a', '\x2', '\x38', '\x39', 
		'\a', '\f', '\x2', '\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', 
		')', '\x3', '\x2', '\x2', '\x2', ':', '/', '\x3', '\x2', '\x2', '\x2', 
		':', '\x34', '\x3', '\x2', '\x2', '\x2', ';', '\r', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x5', '\x2', '\x2', '\x2', '=', '>', '\a', '\x3', '\x2', 
		'\x2', '>', '?', '\x5', '\x4', '\x3', '\x2', '?', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\a', '\v', '\x2', '\x2', '\x41', '\x42', '\x5', '\xE', 
		'\b', '\x2', '\x42', '\x43', '\a', '\n', '\x2', '\x2', '\x43', '\x44', 
		'\x5', '\xE', '\b', '\x2', '\x44', '\x45', '\a', '\f', '\x2', '\x2', '\x45', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\v', '\x2', '\x2', 
		'G', 'H', '\a', '\x17', '\x2', '\x2', 'H', 'I', '\x5', '\f', '\a', '\x2', 
		'I', 'J', '\a', '\x18', '\x2', '\x2', 'J', 'K', '\x5', '\xE', '\b', '\x2', 
		'K', 'L', '\a', '\x19', '\x2', '\x2', 'L', 'M', '\x5', '\xE', '\b', '\x2', 
		'M', 'N', '\a', '\f', '\x2', '\x2', 'N', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\a', '\v', '\x2', '\x2', 'P', 'Q', '\a', '\x15', '\x2', '\x2', 
		'Q', 'R', '\x5', '\f', '\a', '\x2', 'R', 'S', '\a', '\x16', '\x2', '\x2', 
		'S', 'T', '\a', '\x1A', '\x2', '\x2', 'T', 'U', '\x5', '\f', '\a', '\x2', 
		'U', 'V', '\a', '\x1B', '\x2', '\x2', 'V', 'W', '\x5', '\xE', '\b', '\x2', 
		'W', 'X', '\a', '\f', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Y', '<', '\x3', '\x2', '\x2', '\x2', 'Y', '@', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\x46', '\x3', '\x2', '\x2', '\x2', 'Y', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\xF', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\x15', 
		'\x2', '\x2', '\\', ']', '\x5', '\f', '\a', '\x2', ']', '^', '\a', '\x16', 
		'\x2', '\x2', '^', '_', '\x5', '\xE', '\b', '\x2', '_', '`', '\a', '\x15', 
		'\x2', '\x2', '`', '\x61', '\x5', '\f', '\a', '\x2', '\x61', '\x62', '\a', 
		'\x16', '\x2', '\x2', '\x62', '\x11', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'!', ':', 'Y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
